{"version":3,"sources":["index.js"],"names":["PhoenixLiveViewDropzone","eventName","node","document","createElement","el","appendChild","liveView","generateUrl","pushEvent","statusUpdate","event","target","dataset","pushEventTo","data","flags","buttonClass","buttonText","fileTypes","split","text","app","Elm","Main","init","ports","requestUrl","subscribe","uploadStatus","dataId","id","dataUrl","url","dataCsrfToken","csrfToken","addUploadUrl","send","csrf_token"],"mappings":";;;AAAA,aAiEeA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,QAAAA,QAAAA,6BAAAA,EA/Df,IAAA,EAAA,QAAA,cA+DeA,SAAAA,EAAAA,EAAAA,GAAAA,KAAAA,aAAAA,GAAAA,MAAAA,IAAAA,UAAAA,qCAAAA,SAAAA,EAAAA,EAAAA,GAAAA,IAAAA,IAAAA,EAAAA,EAAAA,EAAAA,EAAAA,OAAAA,IAAAA,CAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,WAAAA,EAAAA,aAAAA,EAAAA,EAAAA,cAAAA,EAAAA,UAAAA,IAAAA,EAAAA,UAAAA,GAAAA,OAAAA,eAAAA,EAAAA,EAAAA,IAAAA,IAAAA,SAAAA,EAAAA,EAAAA,EAAAA,GAAAA,OAAAA,GAAAA,EAAAA,EAAAA,UAAAA,GAAAA,GAAAA,EAAAA,EAAAA,GAAAA,EA7Df,IAAMC,EAAY,eAELD,EAAAA,WA2DEA,SAAAA,IAAAA,EAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,CAAAA,CAAAA,IAAAA,UA1DH,MAAA,WACJE,IAAAA,EAAOC,SAASC,cAAc,OAC7BC,KAAAA,GAAGC,YAAYJ,GAEhBK,IAEAC,EAAaC,EAAWC,EAFxBH,EAAW,KAIfE,EAAY,SAACE,GACPC,IAAAA,EAASL,EAASF,GAAGQ,QAAQD,OAC7BA,EACFL,EAASO,YAAYF,EAAQX,EAAWU,GAExCJ,EAASE,UAAUR,EAAWU,IAIlCH,EAAc,SAACO,GAASN,OAAAA,EAAU,CAAC,eAAgBM,KACnDL,EAAe,SAACK,GAASN,OAAAA,EAAU,CAAC,cAAeM,KAE/CC,IAAAA,EAAQ,GAER,KAAKX,GAAGQ,QAAQI,cAClBD,EAAMC,YAAc,KAAKZ,GAAGQ,QAAQI,aAGlC,KAAKZ,GAAGQ,QAAQK,aAClBF,EAAME,WAAa,KAAKb,GAAGQ,QAAQK,YAGjC,KAAKb,GAAGQ,QAAQM,YAClBH,EAAMG,UAAY,KAAKd,GAAGQ,QAAQM,UAAUC,MAAM,MAGhD,KAAKf,GAAGQ,QAAQQ,OAClBL,EAAMK,KAAO,KAAKhB,GAAGQ,QAAQQ,MAG1BC,KAAAA,IAAMC,EAAIC,IAAAA,KAAKC,KAAK,CAACT,MAAOA,EAAOd,KAAMA,IACzCoB,KAAAA,IAAII,MAAMC,WAAWC,UAAUpB,GAC/Bc,KAAAA,IAAII,MAAMG,aAAaD,UAAUlB,GAEjCoB,KAAAA,OAAS,KAAKzB,GAAGQ,QAAQkB,GACzBC,KAAAA,QAAU,KAAK3B,GAAGQ,QAAQoB,IAC1BC,KAAAA,cAAgB,KAAK7B,GAAGQ,QAAQsB,YAc1BnC,CAAAA,IAAAA,UAXH,MAAA,WACJa,IAAAA,EAAU,KAAKR,GAAGQ,QAClBA,GAAW,KAAKiB,SAAWjB,EAAQkB,IAAM,KAAKC,UAAYnB,EAAQoB,KAAO,KAAKC,gBAAkBrB,EAAQsB,YACrGL,KAAAA,OAASjB,EAAQkB,GACjBC,KAAAA,QAAUnB,EAAQoB,IAClBC,KAAAA,cAAgBrB,EAAQsB,UACxBb,KAAAA,IAAII,MAAMU,aAAaC,KAAK,CAACN,GAAI,KAAKD,OAAQG,IAAK,KAAKD,QAASM,WAAY,KAAKJ,qBAK9ElC,EA3DFA,GA2DEA,QAAAA,wBAAAA,EAAAA,IAAAA,EAAAA,EAAAA,QAAAA,QAAAA","file":"dist.js","sourceRoot":"../../src","sourcesContent":["'use strict';\n\nimport { Elm } from \"./Main.elm\";\n\nconst eventName = \"phx-dropzone\";\n\nexport class PhoenixLiveViewDropzone {\n  mounted() {\n    var node = document.createElement(\"div\");\n    this.el.appendChild(node);\n\n    var liveView = this;\n\n    var generateUrl, pushEvent, statusUpdate;\n\n    pushEvent = (event) => {\n      var target = liveView.el.dataset.target;\n      if (target) {\n        liveView.pushEventTo(target, eventName, event)\n      } else {\n        liveView.pushEvent(eventName, event)\n      }\n    }\n\n    generateUrl = (data) => pushEvent([\"generate-url\", data]);\n    statusUpdate = (data) => pushEvent([\"file-status\", data]);\n\n    var flags = {};\n\n    if (this.el.dataset.buttonClass) {\n      flags.buttonClass = this.el.dataset.buttonClass;\n    }\n\n    if (this.el.dataset.buttonText) {\n      flags.buttonText = this.el.dataset.buttonText;\n    }\n\n    if (this.el.dataset.fileTypes) {\n      flags.fileTypes = this.el.dataset.fileTypes.split(\",\");\n    }\n\n    if (this.el.dataset.text) {\n      flags.text = this.el.dataset.text;\n    }\n\n    this.app = Elm.Main.init({flags: flags, node: node});\n    this.app.ports.requestUrl.subscribe(generateUrl);\n    this.app.ports.uploadStatus.subscribe(statusUpdate);\n\n    this.dataId = this.el.dataset.id;\n    this.dataUrl = this.el.dataset.url;\n    this.dataCsrfToken = this.el.dataset.csrfToken\n  }\n\n  updated() {\n    var dataset = this.el.dataset;\n    if (dataset && this.dataId !== dataset.id && this.dataUrl !== dataset.url && this.dataCsrfToken !== dataset.csrfToken) {\n      this.dataId = dataset.id;\n      this.dataUrl = dataset.url;\n      this.dataCsrfToken = dataset.csrfToken;\n      this.app.ports.addUploadUrl.send({id: this.dataId, url: this.dataUrl, csrf_token: this.dataCsrfToken});\n    }\n  }\n}\n\nexport default PhoenixLiveViewDropzone;\n"]}